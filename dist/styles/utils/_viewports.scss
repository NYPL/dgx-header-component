/* --- Media Query Generator ---
 * Reusable mixin used to generate
 * variations of media query properties.
 */
@mixin generate-mq($args...) {
  $media-type: 'only screen';
  $media-type-key: 'media-type';
  $args: keywords($args);
  $expr: '';

  @if map-has-key($args, $media-type-key) {
    $media-type: map-get($args, $media-type-key);
    $args: map-remove($args, $media-type-key);
  }

  @each $key, $value in $args {
    @if $value {
      $expr: "#{$expr} and (#{$key}: #{$value})";
    }
  }

  @media #{$media-type} #{$expr} {
    @content;
  }
}

/* min-and-max-screen($min, $max, $orientation) 
 * $min - required
 * $max - required
 * $orientation - optional
 * Ex: @include min-and-max-screen(768px, 1024px, landscape) { ... }
 */
@mixin min-and-max-screen($min, $max, $orientation: false) {
  @include generate-mq($min-width: $min, $max-width: $max, $orientation: $orientation) {
    @content;
  }
}

/* max-screen($max, $orientation) 
 * $max - required
 * $orientation - optional
 * Ex #1: @include max-screen(768px, landscape) { ... }
 * Ex #2: @include max-screen(768px) { ... }
 */
@mixin max-screen($max, $orientation: false) {
  @include generate-mq($max-width: $max, $orientation: $orientation) {
    @content;
  }
}

/* min-screen($min, $orientation) 
 * $min - required
 * $orientation - optional
 * Ex #1: @include min-screen(768px, landscape) { ... }
 * Ex #2: @include min-screen(768px) { ... }
 */
@mixin min-screen($min, $orientation: false) {
  @include generate-mq($min-width: $min, $orientation: $orientation) {
    @content;
  }
}

/* landscape() 
 * Ex: @include landscape() { ... }
 */
@mixin landscape() {
  @include generate-mq($orientation: landscape) {
    @content;
  }
}

/* portrait() 
 * Ex: @include portrait() { ... }
 */
@mixin portrait() {
  @include generate-mq($orientation: portrait) {
    @content;
  }
}